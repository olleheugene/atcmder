name: Build and Test (Multi-OS with PyInstaller)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash

    - name: Build with PyInstaller
      run: |
        echo "Building on ${{ runner.os }}..."
        pyinstaller atcmder.spec
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ runner.os }}
        path: dist/

name: Multi-OS Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build & Release on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash

    - name: Build with PyInstaller
      run: |
        pyinstaller atcmder.spec
      shell: bash
      
    - name: Package executable
      run: |
        mkdir release
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          zip release/atcmder-windows.zip dist/atcmder/atcmder.exe
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          zip -r release/atcmder-macos.zip dist/atcmder/atcmder.app
        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          zip -r release/atcmder-linux.zip dist/atcmder/atcmder
        fi
      shell: bash

    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*.zip
        name: ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
